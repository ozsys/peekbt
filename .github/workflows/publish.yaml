name: publish

# ────────────────────────────────
# ① トリガ
#    * main への PR が merge されたとき
#    * vX.Y.Z タグを push したとき
# ────────────────────────────────
on:
  pull_request:
    branches: [main]
    types: [closed]
  push:
    tags: ["v*"]

# ────────────────────────────────
# ② PR を閉じたとき（release ブランチ → main）版
# ────────────────────────────────
jobs:
  setup:
    if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'releases/v') && github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.vars.outputs.tag }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: 取得したタグ名を抽出
        id: vars
        run: echo "tag=${GITHUB_HEAD_REF##*/v}" >> "$GITHUB_OUTPUT"

      - name: Release を作成
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.vars.outputs.tag }}
          release_name: Release v${{ steps.vars.outputs.tag }}

  publish:
    needs: setup          # ← setup が実行された時だけ走る
    if: needs.setup.result == 'success'
    runs-on: ubuntu-latest

    steps:
      - uses: extractions/setup-just@v3
        with: { just-version: "1.40.0" }

      - uses: actions/checkout@v4
        with: { ref: main, fetch-depth: 0 }

      - name: Git submodule 初期化
        run: |
          git config --global user.name  "GitHub Actions"
          git config --global user.email "action@github.com"
          auth="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth" -c protocol.version=2 \
              submodule update --init --force --recursive --depth=1

      - name: 配布ファイル生成 & アップロード
        env: { GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} }
        run: |
          just make_distribution_files
          just upload_assets v${{ needs.setup.outputs.tag }}

# ────────────────────────────────
# ③ タグ push 版（Release & Docker イメージ生成）
# ────────────────────────────────
  release-tag:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.vars.outputs.tag }}

    steps:
      - name: Version 抽出
        id: vars
        run: echo "tag=${GITHUB_REF#refs/tags/v}" >> "$GITHUB_OUTPUT"

      - name: Release 作成
        id: create_release
        uses: actions/create-release@v1
        env: { GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} }
        with:
          tag_name: v${{ steps.vars.outputs.tag }}
          release_name: Release v${{ steps.vars.outputs.tag }}

      - uses: extractions/setup-just@v3
        with: { just-version: "1.40.0" }

      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: 配布ファイル生成 & アップロード
        env: { GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} }
        run: |
          just make_distribution_files
          just upload_assets v${{ steps.vars.outputs.tag }}

# ────────────────────────────────
# ④ Docker イメージ build/push
#    * タグ push 時のみ実行
# ────────────────────────────────
  docker:
    needs: release-tag                 # ← release-tag が走った時だけ
    if: needs.release-tag.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v2

      - name: メタデータ生成
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/ozsys/peekbt
          tags: |
            type=raw,value=latest
            type=sha,format=short
            type=semver,pattern={{version}}

      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v4

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/ozsys/peekbt:buildcache
          cache-to:   type=registry,ref=ghcr.io/ozsys/peekbt:buildcache,mode=max
          